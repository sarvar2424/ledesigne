<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Leora Finance ‚Äî GH Pages Preview</title>
  <!-- Tailwind (CDN, –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- React 18 + ReactDOM (UMD) -->
  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
  <!-- Babel –¥–ª—è JSX –≤ –±—Ä–∞—É–∑–µ—Ä–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ –Ω–∞ GH Pages) -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <!-- Lucide (–∏–∫–æ–Ω–∫–∏ –≤ DOM —á–µ—Ä–µ–∑ data-lucide) -->
  <script src="https://unpkg.com/lucide@latest"></script>
  <style>
    html, body { height: 100%; }
  </style>
</head>
<body class="bg-white text-neutral-900 dark:bg-black dark:text-white">
  <div id="app"></div>

  <script type="text/babel">
    const { useState, useEffect, useMemo } = React;

    // ======================= –£—Ç–∏–ª–∏—Ç—ã =======================
    const clamp = (v, min, max) => Math.min(Math.max(v, min), max);
    const toCurrency = (n) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', maximumFractionDigits: 0 }).format(n);
    const sum = (arr) => arr.reduce((a,b)=>a+b,0);
    const sma = (values, windowSize = 7) => values.map((_,i)=>sum(values.slice(Math.max(0,i-windowSize+1), i+1)) / (i < windowSize ? (i+1) : windowSize));
    const calcSettlementsTotals = (list) => ({
      youOwe: list.filter(x=>x.net<0).reduce((a,b)=>a+Math.abs(b.net),0),
      oweYou: list.filter(x=>x.net>0).reduce((a,b)=>a+b.net,0),
    });

    // ======================= –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã =======================
    function Chip({children}) {
      return <span className="px-3 py-1.5 rounded-full border bg-black/5 dark:bg-white/10 border-black/10 dark:border-white/10 text-sm">{children}</span>;
    }

    function Sparkline({ points, color = '#0ea5e9' }){
      const W = 180, H = 48; const max = Math.max(1, ...points);
      const path = points.map((v,i)=>{
        const x = (i/(points.length-1))*W; const y = H - (v/max)*(H-4) - 2; return `${i?'L':'M'}${x.toFixed(1)},${y.toFixed(1)}`;
      }).join(' ');
      return (
        <svg width={W} height={H} viewBox={`0 0 ${W} ${H}`} className="block">
          <path d={path} fill="none" stroke={color} strokeWidth="2" strokeLinejoin="round" strokeLinecap="round" />
        </svg>
      );
    }

    function TxRow({ tx, mask }){
      const amtClass = tx.amount>=0 ? 'text-emerald-600 dark:text-emerald-400' : 'text-rose-600 dark:text-rose-400';
      return (
        <div className="p-3 rounded-xl border bg-white/60 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className={`w-9 h-9 rounded-xl grid place-items-center ${tx.amount<0?'bg-rose-500/15':'bg-emerald-500/15'}` }>
              <i data-lucide={tx.amount<0?'arrow-down-circle':'arrow-up-circle'} class="w-4 h-4 text-current"></i>
            </div>
            <div>
              <div className="font-semibold leading-tight">{tx.title}</div>
              <div className="text-xs text-gray-600 dark:text-gray-300">{tx.category} ‚Ä¢ {tx.time}</div>
            </div>
          </div>
          <div className={`min-w-[86px] text-right font-semibold ${amtClass}`}>{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(Math.abs(tx.amount))}</div>
        </div>
      );
    }

    // ======================= –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ =======================
    function App(){
      const [dark, setDark] = useState(true);
      useEffect(()=>{ document.documentElement.classList.toggle('dark', dark); }, [dark]);
      useEffect(()=>{ if (window.lucide) window.lucide.createIcons(); });

      const [mask, setMask] = useState(false);
      const [tab, setTab] = useState('tx');

      const period = { month: new Date().getMonth()+1, year: new Date().getFullYear() };
      const monthName = new Date(period.year, period.month-1, 1).toLocaleDateString('ru-RU', { month:'long', year:'numeric' });

      const txData = [
        { date: '–°–µ–≥–æ–¥–Ω—è', items:[
          { id:1, title:'–ö–æ—Ñ–µ', category:'–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏', amount:-280, time:'09:30' },
          { id:2, title:'–§—Ä–∏–ª–∞–Ω—Å', category:'–î–æ—Ö–æ–¥', amount:12500, time:'12:15' },
        ]},
        { date: '–í—á–µ—Ä–∞', items:[ { id:3, title:'–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', category:'–ü—Ä–æ–¥—É–∫—Ç—ã', amount:-2100, time:'19:40' } ]}
      ];

      const budgets = [ {name:'–ü—Ä–æ–¥—É–∫—Ç—ã', spent:12600, limit:15000}, {name:'–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', spent:7600, limit:9000} ];
      const goals = [ {name:'–û—Ç–ø—É—Å–∫ –≤ –æ–∫—Ç—è–±—Ä–µ', saved:82000, target:120000} ];
      const settlements = [ {name:'–ê–Ω–Ω–∞', net:-1200, last:'–°–µ–≥–æ–¥–Ω—è 10:40'}, {name:'–û–ª–µ–≥', net:2300, last:'–í—á–µ—Ä–∞ 19:10'} ];
      const totals = useMemo(()=>calcSettlementsTotals(settlements), [settlements]);

      const monthData = useMemo(()=>Array.from({length:31},(_,i)=>2000+Math.round(Math.sin(i/3)*800+Math.random()*900)),[]);
      const expensesToday = txData[0].items.filter(t=>t.amount<0).reduce((a,b)=>a+Math.abs(b.amount),0);
      const incomeToday = txData[0].items.filter(t=>t.amount>0).reduce((a,b)=>a+Math.abs(b.amount),0);
      const balance = 385000;

      return (
        <div className="min-h-screen">
          {/* HEADER */}
          <div className="sticky top-0 z-20 bg-gradient-to-b from-white to-gray-50 dark:from-black dark:to-black/60 backdrop-blur">
            <div className="flex items-center justify-between px-5 pt-8 pb-5">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-xl grid place-items-center shadow-md bg-gradient-to-br from-gray-900 to-gray-700 text-white">
                  <i data-lucide="wallet" class="w-5 h-5"></i>
                </div>
                <div>
                  <h1 className="m-0 text-[24px] font-semibold tracking-tight">–§–∏–Ω–∞–Ω—Å—ã</h1>
                  <p className="m-0 mt-0.5 text-[13px] text-gray-500 dark:text-gray-400">–ü—Ä–µ–º–∏—É–º ‚Ä¢ –æ—Ñ–ª–∞–π–Ω‚Äë–ø–µ—Ä–≤—ã–π</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                <button onClick={()=>setMask(v=>!v)} className="px-3 h-9 grid place-items-center rounded-xl border border-black/10 dark:border-white/15 text-xs text-gray-700 dark:text-gray-200">{mask?'–ü–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—ã':'–°–∫—Ä—ã—Ç—å —Å—É–º–º—ã'}</button>
                <button onClick={()=>setDark(v=>!v)} className="px-3 h-9 grid place-items-center rounded-xl border border-black/10 dark:border-white/15 text-xs text-gray-700 dark:text-gray-200">{dark?'üåô Dark':'üåï Light'}</button>
              </div>
            </div>
          </div>

          {/* PERIOD + SUMMARY */}
          <div className="px-5">
            <div className="flex items-center justify-between mb-3">
              <div className="px-3 py-2 rounded-xl border bg-white/60 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10 text-sm font-semibold">{monthName}</div>
              <div className="text-xs text-gray-500 dark:text-gray-400">–°—Ç–∞—Ç—É—Å: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ</div>
            </div>

            {/* Balance Card */}
            <div className="p-4 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10 mb-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-[13px] text-gray-500 dark:text-gray-400">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å</div>
                  <div className="text-2xl font-semibold">{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(balance)}</div>
                </div>
                <Sparkline points={monthData.slice(0, 20)} color={dark?'#fff':'#0ea5e9'} />
              </div>
              <div className="grid grid-cols-2 gap-3 mt-2">
                <div className="p-3 rounded-xl bg-emerald-500/10 dark:bg-emerald-500/15">
                  <div className="text-xs text-gray-600 dark:text-gray-300">–î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è</div>
                  <div className="text-[18px] font-semibold text-emerald-600 dark:text-emerald-400">{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(incomeToday)}</div>
                </div>
                <div className="p-3 rounded-xl bg-rose-500/10 dark:bg-rose-500/15">
                  <div className="text-xs text-gray-600 dark:text-gray-300">–†–∞—Å—Ö–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è</div>
                  <div className="text-[18px] font-semibold text-rose-600 dark:text-rose-400">{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(expensesToday)}</div>
                </div>
              </div>
            </div>
          </div>

          {/* TABS */}
          <div className="px-5">
            <div className="flex items-center gap-2 mb-3">
              {[
                ['tx','–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'],
                ['budgets','–ë—é–¥–∂–µ—Ç—ã'],
                ['goals','–¶–µ–ª–∏'],
                ['settlements','–í–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç—ã'],
                ['analytics','–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
              ].map(([id,label])=> (
                <button key={id} onClick={()=>setTab(id)} className={`px-3 py-2 rounded-xl border text-sm ${tab===id? 'bg-black/80 text-white dark:bg-white/20 dark:text-white border-black/0 dark:border-white/0':'bg-white/70 dark:bg-white/5 border-black/10 dark:border-white/10 text-gray-700 dark:text-gray-200'}`}>{label}</button>
              ))}
            </div>

            {/* CONTENTS */}
            {tab==='tx' && (
              <div className="grid gap-4 pb-20">
                {txData.map((day,i)=> (
                  <div key={i}>
                    <div className="text-xs uppercase tracking-wide text-gray-500 dark:text-gray-400 mb-2">{day.date}</div>
                    <div className="grid gap-2">{day.items.map(t=> <TxRow key={t.id} tx={t} mask={mask} />)}</div>
                  </div>
                ))}
              </div>
            )}

            {tab==='budgets' && (
              <div className="grid gap-3 pb-20">
                {budgets.map((b,i)=>{
                  const pct = clamp((b.spent/b.limit)*100, 0, 100);
                  const tone = pct<60?'bg-emerald-500': pct<90?'bg-amber-500':'bg-rose-500';
                  return (
                    <div key={i} className="p-4 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10">
                      <div className="flex items-center justify-between mb-2"><div className="font-semibold">{b.name}</div><div className="text-sm text-gray-600 dark:text-gray-300">–æ—Å—Ç–∞–ª–æ—Å—å {mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(Math.max(0,b.limit-b.spent))}</div></div>
                      <div className="h-3 rounded-xl bg-black/5 dark:bg-white/10 overflow-hidden"><div className={`h-full ${tone}`} style={{width:`${pct}%`}}></div></div>
                      <div className="flex items-center justify-between mt-2 text-sm text-gray-600 dark:text-gray-300">{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(b.spent)} / {mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(b.limit)}<div className="flex gap-2"><button className="px-3 py-1.5 rounded-xl border bg-white dark:bg-transparent/20 border-black/10 dark:border-white/10 text-sm">–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç</button><button className="px-3 py-1.5 rounded-xl border bg-white dark:bg-transparent/20 border-black/10 dark:border-white/10 text-sm">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</button></div></div>
                    </div>
                  );
                })}
              </div>
            )}

            {tab==='goals' && (
              <div className="grid gap-3 pb-20">
                {goals.map((g,i)=>{
                  const pct = clamp((g.saved/g.target)*100, 0, 100);
                  return (
                    <div key={i} className="p-4 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10">
                      <div className="flex items-center gap-2 mb-2"><i data-lucide="piggy-bank" class="w-4 h-4"></i><div className="font-semibold">{g.name}</div></div>
                      <div className="h-3 rounded-xl bg-black/5 dark:bg-white/10 overflow-hidden"><div className="h-full bg-emerald-500" style={{width:`${pct}%`}}></div></div>
                      <div className="flex items-center justify-between mt-2 text-sm text-gray-600 dark:text-gray-300">{mask?'‚Ä¢‚Ä¢‚Ä¢':toCurrency(g.saved)} / {mask?'‚Ä¢‚Ä¢‚Ä¢':toCurrency(g.target)}<div className="flex gap-2"><button className="px-3 py-1.5 rounded-xl border bg-white dark:bg-transparent/20 border-black/10 dark:border-white/10 text-sm">+ –í–∑–Ω–æ—Å</button><button className="px-3 py-1.5 rounded-xl border bg-white dark:bg-transparent/20 border-black/10 dark:border-white/10 text-sm">–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å</button></div></div>
                    </div>
                  );
                })}
              </div>
            )}

            {tab==='settlements' && (
              <div className="grid gap-3 pb-20">
                <div className="p-4 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10">
                  <div className="flex items-center gap-2 mb-1"><i data-lucide="users" class="w-4 h-4"></i><div className="font-semibold">–í–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç—ã</div></div>
                  <div className="flex flex-wrap gap-2">
                    <Chip>–í—ã –¥–æ–ª–∂–Ω—ã <b className="font-semibold">{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(totals.youOwe)}</b></Chip>
                    <Chip>–í–∞–º –¥–æ–ª–∂–Ω—ã <b className="font-semibold">{mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢':toCurrency(totals.oweYou)}</b></Chip>
                  </div>
                </div>
                {settlements.map((s,i)=> (
                  <div key={i} className="p-3 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-9 h-9 rounded-xl grid place-items-center bg-sky-500/15"><i data-lucide="user" class="w-4 h-4 text-sky-500"></i></div>
                        <div>
                          <div className="font-semibold">{s.name}</div>
                          <div className="text-xs text-gray-600 dark:text-gray-300">{s.last}</div>
                        </div>
                      </div>
                      <div className={`min-w-[110px] text-right font-semibold ${s.net>0? 'text-emerald-600 dark:text-emerald-400' : s.net<0? 'text-rose-600 dark:text-rose-400' : 'text-gray-500 dark:text-gray-400'}`}>
                        {mask?'‚Ä¢‚Ä¢‚Ä¢‚Ä¢': (s.net===0 ? '0 ‚ÇΩ' : (s.net>0 ? `+${toCurrency(s.net)}` : `‚àí${toCurrency(Math.abs(s.net))}`))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {tab==='analytics' && (
              <div className="grid gap-3 pb-20">
                <div className="p-4 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10">
                  <div className="flex items-center gap-2 mb-2"><i data-lucide="pie-chart" class="w-4 h-4"></i><div className="font-semibold">–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</div></div>
                  <div className="grid grid-cols-4 gap-3">
                    {[['–ü—Ä–æ–¥—É–∫—Ç—ã',34,'bg-emerald-500'],['–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',22,'bg-sky-500'],['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',18,'bg-rose-500'],['–°–µ—Ä–≤–∏—Å—ã',12,'bg-amber-500']].map(([n,v,c],i)=> (
                      <div key={i} className="p-3 rounded-xl border bg-white/60 dark:bg-white/5 border-black/10 dark:border-white/10">
                        <div className="text-sm text-gray-600 dark:text-gray-300">{n}</div>
                        <div className="text-2xl font-semibold">{v}%</div>
                        <div className="h-2 rounded bg-black/5 dark:bg-white/10 mt-2 overflow-hidden"><div className={`h-full ${c}`} style={{width:`${v}%`}}></div></div>
                      </div>
                    ))}
                  </div>
                </div>
                <div className="p-4 rounded-2xl border bg-white/70 dark:bg-white/5 backdrop-blur-xl border-black/10 dark:border-white/10">
                  <div className="flex items-center gap-2 mb-2"><i data-lucide="activity" class="w-4 h-4"></i><div className="font-semibold">–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫ (30 –¥–Ω–µ–π)</div></div>
                  <Sparkline points={monthData} color={dark?'#fff':'#111'} />
                </div>
              </div>
            )}
          </div>
        </div>
      );
    }

    const root = ReactDOM.createRoot(document.getElementById('app'));
    root.render(<App/>);

    // ======================= –ú–∏–Ω–∏‚Äë—Ç–µ—Å—Ç—ã =======================
    console.assert(clamp(5,0,10)===5, 'clamp within');
    console.assert(clamp(-1,0,10)===0, 'clamp low');
    console.assert(clamp(99,0,10)===10, 'clamp high');
    const smaRes = sma([1,2,3],2); const smaExpected = JSON.stringify([1,1.5,2.5]);
    console.assert(JSON.stringify(smaRes)===smaExpected, 'sma window=2');
    const totalsTest = calcSettlementsTotals([{net:-1200},{net:2300},{net:0}]);
    console.assert(totalsTest.youOwe===1200 && totalsTest.oweYou===2300, 'settlements totals');
    console.assert(toCurrency(1000).includes('‚ÇΩ'), 'currency RUB symbol');
  </script>

</body>
</html>
